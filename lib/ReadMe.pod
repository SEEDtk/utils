=head1 SEEDtk Project Notes

This file contains important notes about the SEEDtk programming environment.

=head1 Directory Configuration

The SEEDtk system is designed for development in two distinct environments-- as
an Eclipse workspace on a single-user PC, and as a directory tree on a Unix
server.

The project is divided into multiple I<modules>. Each module has a B<lib>
subdirectory containing PERL modules and a B<script> subdirectory containing
PERL scripts.

In addition to the modules, there is the I<project directory> containing utilities
and files related to setup and configuration, the I<web directory> containing a
web site used to assist in development, and the I<data directory> containing
default locations for data used in loading the database.

=head2 The Project Directory

The project directory is generally called C<seedtk> or some variation.
In the Unix environment, it is the root directory of the entire project.
The source modules are stored in the C<modules> subdirectory and the
data directory is in a subdirectory called C<Data>. In addition to these, the
project directory contains the following subdirectories.

=over 4

=item config

Configuration files. This includes the L<FIG_Config> file.

=item doc

Documentation directory.

=item template

Templates used by the setup and configuration tools.

=item tools

Unix scripts for facilitating configuration and maintenance.

=back

There are also several files in the project directory root that
are used in deployment and setup.

=head3 FIG_Config

The structural information about the SEEDtk environment is kept in the L<FIG_Config> file
in the B<config> subdirectory of the project directory.

The information in the L<FIG_Config> is used to generate helper files and scripts, as
well as to specify defaults in various parts of the L<ERDBtk> system. When it changes,
you must run L<Config.pl> to update your environment. The B<@modules> variable
contains a list of the modules installed on your system. This is used to configure
your path and your list of PERL include libraries. L<Config.pl> will insure the
core modules required to run the system are always included in this list.

In Windows, you can direct L<Config.pl> to write environment information to the
system registry. If this is the case, you must reboot the system to access the
new information. In an Eclipse configuration, you can direct L<Config.pl> to update
your virtual hosts file. In this case, you must restart the local web server.

=head2 The Source Modules

The project is divided into multiple source modules. The core modules are as follows.

=over 4

=item ERDB

This module contains the code for implementing the database layer and scripts for
loading and maintaining the database.

=item kernel

This module contains code relating to bioinformatics and scripts for querying and
updating the database.

=item RASTtk

This module contains code that is intended to be shared to other projects. It relies
only on libraries in the C<utils> component.

=item utils

This module contains code that does not relate to the database and requires no other
modules to run.


=back

=head2 The Data Directory

The default data directory structure includes two main folders.

=over 4

=item Inputs

The default holding place for data to be loaded into the database. Genome
directories are stored in C<Inputs/GenomeData> and subsystem directories in
C<Inputs/SubSystemData>. The formats of these directories are discussed
in L<ExchangeFormat>.

=item LoadFiles

The storage directory for the files used to load the database. This is
very much a temporary work directory; however, the files are kept after
loading (rather than being created and deleted as true temporary
files) for error recovery and analysis purposes.

=back

These directories are the assumed defaults when doing database loads and
exports; however, they can always be overridden from the command line.
(See L<Shrub/new_for_script> for more information about the standard
database command-line options.)

There is also a data directory associated with the database. The DNA
sequences are kept in FASTA files in a directory called the I<DNA
repository>. This directory belongs with the database, so a single
directory is shared by all users of the same database. When you change
databases, you must also change the DNA repository to match.

=head2 The Web Directory

The web directory contains files that produce a web site with useful development
features. In an Eclipse environment, the web site is configured at the
address C<fig.localhost>. To make sure this address works, some DNS configuration
is required. Unfortunately, for security reasons this can only be done manually.
The web site requires a great deal of setup, so its use is entirely optional; however,
it provides the benefits of easy access to the POD documentation and configuration
data.

=head3 SEEDTK Documentation Facility

The main page has a list of search boxes including one labeled C<SEEDTK CODE>.
Type the name of a perl module in this box, or the name of a script (including
the C<.pl> suffix) to see the relevant POD documentation. You can also type
"C<perl >I<name>" to see the perldoc web page for the function I<name>. Thus,

    perl split

will display the documentation page for the C<split> function.

The buttons below the box have the following functions.

=over 4

=item Links

Display B<Links.html>, a page of useful web links. You can edit this file yourself,
but a default is generated by L<Configure.pl>.

=item Shrub

Display the L</Shrub Database Page>.

=item Methods

Display a page containing forms that help to generate method documentation and
show certain data structures.

=item Scripts

Display a list of command-line scripts and their functions.

=item ENV

Display the environment variables.

=item Config

Display the configuration variables and their values.

=back

=head3 Shrub Database Page

The Shrub Database Page initially displays the database diagram for your current database.
At the top is a form you can use to test queries. The query results appear in the lower
frame. To get the database design back, use the B<Diagram> button.

To test a query, you must enter an L<object name list|ERDBtk/Object Name List> in the B<Path>
box, a L<filter clause|ERDBtk/Filter Clause> in the B<Filter> box, one or more parameter values
in the B<Parms> box, and a field name list in L<standard field name format|ERDBtk/Standard Field Name Format>
in the B<Fields> box. These all correspond to parameters of the method L<ERDBtk/GetAll>.

The B<Limit> box limits the number of rows returned. The B<Code Style> box causes PERL code for the
query to be displayed. A code style of C<GetAll> displays a single call to L<ERDBtk/GetAll>. A code style
of C<Get> displays a loop that uses the method L<ERDBtk/Get>. A code style of C<get_all> generates a command line
for using L<get_all.pl>.

When specifying the parameter values, you can enter a variable name by starting the line with a
dollar sign (C<$>). The dollor sign should be followed by the variable name, then a space, an equal
sign, and another single space followed by the actual value to use. The variable name will be used for
the parameter when the code is generated. If you are doing C<get_all>, use column indicators here (e.g
C<$1> for the first input column, C<$2> for the second, C<$n> for the last). So, for example,

    $genomeID = 83333.1

indicates that the parameter value is C<83333.1>, but when code is generated, it should be called
C<$genomeID>. A similar version for C<get_all> would be

    $n = 83333.1

to denote that when the command is displayed, it should be construed to take the parameter value from the
last column of the input line.

The query console is intended as a debugging tool. Normally, it only returns 100 rows, but this can be
changed using the B<Limit> selector. In addition, it performs several scans of the object name list, field
name list, and filter string to try to generate useful error messages.

=head2 The DNA Repository

Each database has a DNA Repository containing the DNA sequences for each genome. If you are
developing using a local database, then this should point to a local directory (usually
C<DnaRepo> in the data directory). If you are using a shared database, B<you must use the
repository belonging to that database>. The location of the DNA Repository is specified
in your L<FIG_Config> file, which is also where you specify the location of the database.
Both of these things can be overridden onthe command line when you invoke a database
application.

=head1 Setting up a Unix Environment

In the examples below, it will be assumed your user name is C<self>. Simply substitute your real username
when typing the commands.

First, you need a user name and password on GITHUB, and it must be an authorized contributor to the C<seedtk_test>
repository. To insure that you are appropriately identtified, tell GIT your name and EMAIL.

    git config user.name yourFullName
    git config user.email yourGitHubEmail

If you are going to use the SSH protocol, tell GIT to cache your passphrase so you oinly have to type
it every couple of houes.

    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=7200'

Position in your home directory with the B<bash> shell active.

Clone the repository using GIT.

    git clone https://self@github.com/seedtk/seedtk.git SEEDtk

You will be prompted for a password. A new directory C<SEEDtk> will be created at the current
location and the SEEDtk files will be loaded into it. Note that you can specify a different
target directory as the last parameter. If you do, make the appropriate changes to the example
code below.

If you have an SSH key stored on GITHUB, you can use the SSH protocol instead.

    git clone git@github.com:SEEDtk/seedtk.git SEEDtk

At this point I recommend changing to the SEEDtk directory, as it simplifies most of the paths
you'll have to type.

    cd SEEDtk

Now type

    ./seedtk-setup

which will download the rest of the core projects from GITHUB and bootstrap the environment.
You will be prompted for a password on each one

Next you need to create the data and web directories.

    mkdir Data /homes/self/public_html/SEEDtk

Activate the environment by typing

    source user-env.sh

We are now ready to bootstrap the system using the L<Config.pl> script. Type

    Config --dirs --dna=/homes/parrello/DnaRepo Data /homes/self/public_html/SEEDtk

Here C<Data> should be your data directory, and C</homes/self/public_html/SEEDtk> your web
directory.

Now exit from bash. From this point on, to get yourself into a SEEDtk environment, you simply type

    bash
    cd SEEDtk
    source user-env.sh

where as before C<self> is your user name. You can now enter batch commands. To test your installation, type

    ShowEcRoles

You should get a long list of roles and EC numbers. This verifies that you are connected to the
database properly.

=head2 Notes on L<Config.pl>

The L<Config.pl> script is one you will use frequently to insure your environment is up-to-date,
but once the environment is active you will not need to type as many options as you did during
configuration. Most of the time you'll just enter

    Config

directly and everything will be fixed up automatically. You will not need to do this every time you
change the code, only when you update L<FIG_Config> or an environment change is
made to the system as a whole.

=head2 Using Git in Unix

There is a GIT project for the project directory, one for the web directory, and one for each module.
For each repository, there is a local copy on your hard drive and a shared copy in GITHUB. The local
copy serves as backup and project history. The shared copy allows you to synchronize your work with
other members of the project.

Saving your work locally is called I<committing>. Sharing your work on GITHUB is called I<pushing>.
Getting updates from the shared project is called I<pulling>. Note that because of the large number
of projects, it takes several pull operations to synchronize the whole project. The L<seedtk_pull.pl>
script can be used to pull all the projects at once.

Before you do anything, your local repository should be in a committed state. To check the state of
a project, go to its directory and use

    git status -v

which will tell you what has changed since your last commit. To commit your changes, use

    git commit -a -m "commit message"

where C<commit message> is a brief description of your changes. YOU MUST NEVER FORGET TO ADD THE
MESSAGE. If you do, you will be forced to use the VI editor as punishment.

Once your repository is in a committed state, you can get the latest changes for this project from the shared
repository using

    git pull

Sometimes this may reveal merge conflicts. This will require editing the file to resolve the conflicts,
after which you must re-add the file to the index

    git add path/to/file

and then commit again.

To push your changes to the repository, use

    git push

Sometimes you will get a C<Forbidden> error. The most common causes of this error are

=over 4

=item 1

The shared repository has changed recently and you have to do B<pull> first.

=item 2

You have uncommitted changes in your local repository.

=item 3

You typed the wrong password.

=back

=head3 pull-all

Since there are many projects in the SEEDtk system, it can be generally tedious to update
the source. L<Config.pl> creates a shell script called C<pull-all> that does a C<git pull>
from all of the module directories in succession. Simply enter

    pull-all

into the command line.

=head1 Setting Up an Eclipse Environment

In Eclipse, the directory structure is very different. Each module is in its own private directory,
and must be imported as a separate project. Under Windows, no makefile support is required and everything
is executed directly in the Eclipse environment (or a command shell if you prefer).

To begin, create a fresh workspace.

In Windows, go into I<Window, Preferences, Team, Git, Configuration>. On the Mac, use
I<Eclipse, Preferences, Team, Git, Configuration>. Select the I<User Settings> tab, and specify
your name and email. Your email should be the same as the one you use to log in to GITHUB.

Now you need to create your projects. There are five of them to start off, and yes, you have to do
them one at a time.

For each project you want to create:

=over 4

=item 1

From the main Eclipse menu, select I<File, Import, Git, Projects from Git, Clone URI> to get to the
B<Source Git Repository> dialog. Enter the URI C<https://github.com/SEEDtk/>I<project> where I<project>
is the current project (either C<SEEDtk>, C<ERDBtk>, C<kernel>, C<utils>, or C<Web>). Enter your GITHUB
username in the I<User> box of the I<Authentication> section, and your GITHUB password below it in the
I<Password> box. If you check I<Store in Secure Store>, you'll never have to enter the user name or
passwword again. Click I<Next>

=item 2

You should see a list of branches (sometimes only one). Choose C<master> and click
I<Next> again.

=item 3

You should now be on the B<Local Destination> dialog. Select the directory where you want your code
stored. In general, it will be outside the Eclipse workspace in a special directory allocated for GIT.
Make sure, however, that all of the projects are stored under the same folder. That is, if C<seedtk>
is going in the directory C</Users/Projects/GIT/seedtk>, the C<ERDBtk> project must be in
C</Users/Projects/GIT/ERDBtk>, the C<kernel> project in C</Users/Projects/GIT/kernel>, and so forth.
Click I<Next>.

=item 4

You should now be on the B<Select a wizard to use for importing projects> page. Select I<Import existing
projects> and click I<Next>.

=item 5

GIT will have downloaded the repository and show you the name of the project. Leave the project folder
checked and click I<Finish> to complete the import.

=back

Repeat this process for each of the five projects. Eclipse will immediately start flagging the projects
with dozens of errors. This is okay, as we will fix most of them soon.

When you get to the B<Source Git Repository> page, the second time, Eclipse will present a search
drop-down as soon as you type C<h> in the I<URI> box. Double-click the most recent choice, then
change the last segment of the repository path (the project name). Also note that as soon as you type
the first letter of your password in the I<Password> box, your whole password will appear.

Your project has numerous errors because the library paths are not properly specified. We will fix
this now by running the L<Config.pl> script. First, however, we need to create a data directory.
Go into your workspace directory and create a new folder called C<Data>.

From the Eclipse menu, select I<Run, Run Configurations> to get the B<Create, manage, and run configurations>
dialog. Click I<Perl Local> to highlight it and click the B<New> tool to create a new launch configuration.
You should be on the I<Main> tab. Type C<kernel> in the I<Project> box and C<scripts/Config.pl> in the
I<File to execute> box. Change the configuration name to C<Initial Configuration> so you know this is
the first-time Config call. If you've done something wrong, you'll get a little error message at the
top of the dialog and the I<Run> button will dim.

You need to specify arguments. Switch to the I<Arguments> tab, and type

    --dirs --links --eclipse=SEEDtk ${workspace_loc}/Data ${project_loc:Web}

Now you can click the I<Run> button.  Eclipse will tell you there are errors in the project. Reassure
him that this is not a problem by clicking I<Proceed>. A flurry of messages will appear in the console
followed by C<All done>.

If you are using GitHub for Windows (which is only the case for Windows environments, obviously),
add C<--gfw> to the command line above. This will tell it to put GIT in your path.

No do I<Project, Clean> and specify that you want to I<Clean all projects>. The error markers will
all disappear except for one or two indicating PERL modules you need to install. Once you've
installed the missing packages, clean the offending projects and you should have a pristine,
error-free environment.

Finally, you must go into I<Window, Preferences, Git, Configuration> from the menu. On the
I<User Settings> tab, click I<Add Entry> and specify a key of C<core.autocrlf> and a value of
C<true>. This insures that your line endings are translated properly during transfers to and
from the repository.

=head2 The Config.pl Script

From this point on, you will need to run the L<Config.pl> script periodically to re-sync with
changes in your environment. Generally, it is required when you make a change to L<FIG_Config>,
there is a change to your PERL5LIB or PATH environment variables, or there is a global project
change.

After the first successful invocation, the only parameters you need are the command-line option
C<eclipse> (and optionally C<gfw>). Create a new run configuration with just these arguments in it
so you have one handy.

=head2 Using the Command Line in Eclipse

To use the command line on an Eclipse-based system, you must establish the proper environment.
The command-line is accessed via a terminal window. On the Mac, the terminal window is a common
application. Under Windows, you can access a terminal window inside Eclipse by installing the
TCF Terminal add-on.

To set up the command-line environment, you need to run the C<user-env> script. This script sets
up the proper paths and connects the SEEDtk libraries for PERL. Once this command is entered,
the SEEDtk scripts are in your path and can be invoked from any directory. The script will
switch you automatically to the SEEDtk data directory so you can access your data files more
easily.

The problem is, the C<user-env> script is in your SEEDtk project directory and the terminal
program won't be able to find it on its own.

=head3 Invoking user-env in Windows

In Windows, you can start the TCF terminal add-on in the proper directory by selecting the
SEEDtk project in the Eclipse navigation pane before clicking the terminal icon. Then
simply type

    user-env

and the environment will be set up for you.

=head3 Invoking user-env on the Mac

On the Mac, you must enter the full path to the scrit, and you have to source it.

    source /homes/fig/GIT/SEEDtk/user-env.sh

To make the process easier, this command is displayed whenever you run the L<Config.pl>
script.

=head3 Command-Line Examples

From the command line, you can update all of your projects from the GIT hub using the
pull-all command

    pull-all

Under Windows, if you get messages telling you the C<git> command cannot be found,
run L<Config.pl> with the C<--gfw> option to get GIT into your path.

You can load the database using the L<ShrubLoad.pl> command. The following invocation
erases the current content of the database, updates the DBD, and then loads all of the
subsystems and genomes in the C<Inputs> subdirectory of your data directory.

    ShrubLoad --clear --store

The follwing invocation loads the new genomes and subsystems found in the L<ExchangeFormat>
repository at C</vol/updates/seedtk.repo>.

    ShrubLoad --repo=/vol/updates/seedtk.repo

Any command scripts you create in one of the project script directories will also be available
from the command line.

If you recently added new commands or updated your configuration, you can also directly run
the L<Config.pl> script.

    Config --eclipse=SEEDtk


=head2 Preparing the Mac

You can't install L<GD> using CPAN. Instead, you must install libgd. Use the commands below in
a terminal window

    curl -O http://wangqinhu.com/data/gd/gd.tar.gz >gd.tar.gz
    tar -zxf gd.tar.gz
    cd gd
    sudo ./install

You'll need to clean up the install files if it works.

    rm *
    cd ..
    rmdir gd
    rm gd.tar.gz

You will also need MySQL, which can be found L<here|http//:dev.mysql.com/downloads/>.

=head2 Setting up the Database

The default database configuration is designed for development on a few select Unix servers
at the lab. You can, however, set up a local MySQL database for your own use. Go into
C<SEEDtk/config/FIG_Config.pm> and make the following modification.

    our $dbhost = "localhost";

You will need to use MySQL to create a blank database and provide access to it with a
password-protected user.

    CREATE DATABASE seedtk_shrub;
    GRANT ALL ON seedtk_shrub.* TO 'seed'@'localhost' IDENTIFIED BY 'dna=fun';

Assuming you use the examples above (and you shouldn't), you would then configure
the database name and user information in L<FIG_Config> as follows

    our $shrubDB = "seedtk_shrub";
    our $userData = "seed/dna=fun";

Note that in the C<$userData> variable the string is the user name, a slash, and
then the password. B<If you are using your own database, do not leave the C<$shrubDB>
blank even if you are using the same name as the live database, because the live
database name periodically changes!>

Once you have created your database, you should download some genomes and subsystems
and use L<ShrubLoadSubsystems.pl> and L<ShrubLoadGenomes.pl> to load it.

There is a special name and password combination for accessing the live database from
a remote computer over VPN. Contact L<Bruce Parrello|mailto:bparrello@figresearch.com>
for the relevant information.

=head2 Using GIT in Eclipse

Eclipse has built-in support for GIT. Since your projects were created from the GITHUB
repository, they are permanently connected to the GITHUB repositories. Right-click on
a project and select one of the I<Team> options.

To commit a project, use I<Commit>. This commits your changes locally. To push them
up to GITHUB, you can choose to push at the same time; (however, you will not want
to do this all the time, just at major points when the code is stable).

To get the latest source from GITHUB, you can select the I<Pull> option. You
can select multiple projects at the same time when doing a pull, which makes it
very convenient.

=head2 Activating the Development Web Site

In order to use the development web site, you need to modify your HOSTS file and
set up the VHOSTS file. The HOSTS file is located at C</Windows/System32/Drivers/etc/hosts>
on Windows and C</private/etc/hosts> on the Mac. In Windows you can edit it using
a text editor in Administrator mode. On the Mac, you must copy it, edit the copy,
and then copy it back as the root user.

Simply add the line

    127.0.0.1   fig.localhost

to the file. (The IP address starts in column 1.) After updating your hosts file,
you will need to restart the system.

Now you need to run ApacheFix to update your Apache configuration. The single
argument is the location of your VHosts file.  On a Mac, this is
C</private/etc/apache2/extra/httpd-vhosts.conf>. On Windows, this will depend on which
Apache installation you are using. For example, on a standard XAMPP installation,
it would be C</xampp/apache/conf/other/httpd-vhosts.conf>. To run the script on
a Mac, you will need root privileges.

On a Mac, you need to do several other things as well.

=over 4

=item 1

Fix your main configuration file as well. This is
C</private/etc/apache2/httpd.conf>. Specify this with the C<mac> option.

=item 2

Blow away the bogus VHOSTS. Specify this with the C<clear> option.
Don't do that if you have already set up legitimate VHOSTS.

=item 3

Mark the web directory folder as shared. This can be done with Finder.

=back

Once you've done all this, reboot the system to get the configuration changes
stored and go to L<http://fig.localhost> in your browser.

=head2 Creating Test Scripts

Sometimes it helps to write simple scripts for unit testing. Such scripts are not
intended to be included in the final project.

All such scripts should use L<ScriptUtils>. Even if you are not using any of its
methods, including the module insures you will see warning messages in the Eclipse
debugger.

The GIT configuration for each project is set up to ignore scripts that begin with
C<Test_>. Thus, if you give your script a name like C<Test_Unit1.pl> or even
C<Test_1.pl>, it will not be included in the project when you commit or push.
If you decide you want to keep the script, change its name to something more
descriptive.

=head1 Random Notes

=over 4

=item *

When updating Java, you must update the Java Development Kit, not the Java
Runtime. Eclipse looks for the JDK when selecting its Java Virtual Machine.



=back

=head1 External Tools

Severla SEEDtk modules make use of external tools. Each tool is associated with a POD document that explains
how to install it. These are listed below.

=over 4

=item *

L<BLAST+|InstallBlast>

=back

=head1 Useful Links

=over 4

=item 1

L<Bruce's task list|TasksBruce>

=item 2

L<Index of SEEDtk Scripts|scripts>

=item 3

L<Shrub DBD|http://fig.localhost/ShrubQuery.cgi?action=Diagram>

=item 4

L<Outstanding Questions|Questions>

=back

=cut


1;
